/** * @fileOverview 提供底层的 Ajax 支持。 */using("System.Request.Base");/** * 处理异步请求的功能。 * @class Ajax */Request.XMLHttpRequest = Request.Base.extend({	/**	 * 获取或设置请求类型。	 */	type: 'GET',		/**	 * 获取或设置是否为异步请求。	 */	async: true,		/**	 * 是否允许缓存。	 * @type Boolean	 */	cache: true,		/**	 * 获取请求头。	 */	headers: {		'X-Requested-With': 'XMLHttpRequest',		'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'	},			/**	 * 判断一个 HTTP 状态码是否表示正常响应。	 * @param {Number} statusCode 要判断的状态码。	 * @return {Boolean} 如果正常则返回true, 否则返回 false 。	 * 一般地， 200、304、1223 被认为是正常的状态吗。	 */	checkStatusCode: function(statusCode) {		// 获取状态。		if (!statusCode) {			// 获取协议。			var protocol = window.location.protocol;			// 对谷歌浏览器, 在有些协议， statusCode 不存在。			return (protocol == "file: " || protocol == "chrome: " || protocol == "app: ");		}		// 检查， 各浏览器支持不同。		return (statusCode >= 200 && statusCode < 300) || statusCode == 304 || statusCode == 1223;	},		/**	 * 初始化一个 XMLHttpRequest 对象。	 * @constructor	 * @class XMLHttpRequest	 * @return {XMLHttpRequest} 请求的对象。	 */	createNativeRequest: window.XMLHttpRequest ? function(){		return new XMLHttpRequest();	} : function() {		return new ActiveXObject("Microsoft.XMLHTTP");	},	onReadyStateChange: function(errorNo, message){		var me = this, xhr = me.xhr;					if(xhr && (errorNo || xhr.readyState === 4)) {						// 删除 readystatechange  。			xhr.onreadystatechange = Function.empty;						try{								if(errorNo) {					if(errorNo === 2) {						xhr.abort();					}				} else {					errorNo = this.checkStatusCode(xhr.status) ? 0 : 1;					message = xhr.statusText;				}								if (errorNo)					me.onError(errorNo, message, xhr);				else					me.onSuccess(me.getData(xhr), message, xhr);								me.onComplete(xhr, message, errorNo);							} finally {						xhr = me.xhr = null;						}		}	},		getData: function(xhr){		// xhr[/xml/.test(xhr.getResponseHeader('content-type')) ? 'responseXML' : 'responseText']		return xhr.responseText;	},		constructor: function(options){		if(options){			Object.extend(this, options);			if(!this.hasOwnProperty("header")){				this.header = Object.extend(Object.extend({}, Request.XMLHttpRequest.prototype.header), this.header);			}					}	},	/**	 * 发送请求。	 */	send: function() {			/**		 * 当前实例。		 * @type Ajax		 * @ignore		 */		var me = this,  						/**			 * 类型。			 * @type String			 */			type = me.type,  						/**			 * 当前请求。			 * @type String			 */			url = me.url.replace(/#.*$/, ''),						data = me.data;					assert.notNull(this.url, "Request.XMLHttpRequest.prototype.send(): {this.url} ~。", this.url);		assert(/^[A-Z]+$/.test(type), "Request.XMLHttpRequest.prototype.send(): {this.type} 必须是大写的。",this.type);				// 处理数据					// 改成字符串。		if(!data){			data = null;		} else if(typeof data !== 'string') {			data = Request.param(data);		}				// 预处理数据。		me.onStart(data);				// get  请求		if (data && type == 'GET') {			url = Request.combineUrl(url, data);			data = null;		}				// 禁止缓存，为地址加上随机数。		if(!me.cache){			url = Request.combineUrl(url, '_=' +  System.id++);		}				// 打开请求				/**		 * 请求对象。		 * @type XMLHttpRequest		 * @ignore		 */		var xhr = me.xhr = this.createNativeRequest();				try {					if ('username' in me) {				xhr.open(type, url, me.async, me.username, me.password);			} else {				xhr.open(type, url, me.async);			}					} catch (e) {					//  出现错误地址时  ie 在此产生异常			me.onReadyStateChange(3, e.message);			return me;		}				// 设置文件头				if(me.encoding){			me.setEncoding(me.encoding);		}				for(var key in me.headers)			try {				xhr.setRequestHeader(key, me.headers[key]);			} catch (e){				trace.error(e);			}				// 发送				// 监视 提交是否完成		xhr.onreadystatechange = function(){			me.onReadyStateChange(0);		};				try {			xhr.send(data);		} catch (e) {			me.onReadyStateChange(3, e.message);			return me;		}				// 同步时，火狐不会自动调用 onreadystatechange		if (!me.async) {			me.onReadyStateChange(0);		} else if (me.timeouts > 0) {			setTimeout(function() {				me.onReadyStateChange(2, me.timeouts);			}, me.timeouts);		}				return me;			},		/**	 * 设置地址的编码。	 * @param {String} [value] 字符集。	 * @return this	 */	setEncoding: function(value){				if(value)			this.setHeader("Accept-Charset", value);		return this.setHeader('Content-Type', 'application/x-www-form-urlencoded' + (value ? '; charset=' + value : ''));	},		/**	 * 设置请求头。	 * @param {String} key 键。	 * @param {String} text 值。	 * @return this	 */	setHeader: function(key, text){		if(!this.hasOwnProperty("header"))			this.header = Object.extend({}, this.header);				this.header[key] = text;				return this;	},		/**	 * 停止当前的请求。	 * @return this	 */	abort: function() {		if (this.xhr) {			this.xhr.abort();			this.onAbort();			this.xhr = null;		}				return this;	}	});