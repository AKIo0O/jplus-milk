/** * @author xuld */using("Controls.Form.Picker");using("Controls.Form.ListBox");/** * 表示一个组合框。 * @class * @extends Picker * @example <pre> * var comboBox = new ComboBox(); * comboBox.menu.add("aaa"); * comboBox.menu.add("bbb"); * comboBox.menu.setSelectedIndex(0); * </pre>
 */var ComboBox = Picker.extend({		xtype: 'combobox',		/**	 * 处理键盘事件。
	 */	onKeyDown: function(e){		switch(e.keyCode) {						// 上下			case 40:			case 38:							// 阻止默认事件。			    e.preventDefault();			    			    // 如果菜单未显示。			    if(this.menuHidden()){			    				    	// 显示菜单。			    	this.showMenu();			    } else {			    				    	// 如果菜单已选择，选中下/上一项。			    	this.menu.hoverNext(e.keyCode === 40);			    }			    			    break;			    			// 回车			case 13:			case 10:				var currentItem = this.menu.getHover();				if(currentItem != null) {					this.menu.setSelectedItem(currentItem);					e.preventDefault();				}		}	},		onSelect: function(item){		return this.trigger('select', item);	},		onSelectItem: function (item) {		if(this.onSelect(item)) {			this.hideMenu();			this.setSelectedItem(item);		}		return false;			},		init: function (options) {				// 1. 初始化下拉菜单		// 创建下拉菜单		var listBox = new ListBox(), defaultSelectedItem;				// 绑定 mouseover 时改变当前的项。		listBox.bindSelector('mouseover');				// 设置下拉菜单		this.setMenu(listBox);				// 绑定下拉菜单的点击事件		listBox.on('itemclick', this.onSelectItem, this);				// 2. 处理 <select>				// 如果初始化的时候传入一个 <select> 则替换 <select>, 并拷贝相关数据。		if(this.node.tagName === 'SELECT') {			var select = this.node;						// 调用 create 重新生成 dom 。			this.node = this.create(options);						// 替换 <select> 为新的 dom。			select.parentNode.replaceChild(this.node, select);						// 让 listBox 拷贝 <select> 的成员。			listBox.copyItemsFromSelect(select);						// 设置文本框为只读的。			this.setDropDownList();						// 获取默认选中的项，方便在下文设置默认值。			defaultSelectedItem = listBox.getSelectedItem();					}				// 3. 初始化文本框				// 初始化文本框		this.base('init');				if(this.textBox.node.name){			this.setName(this.textBox.node.name);			this.textBox.node.name = '';		}				// 4. 绑定事件				// 设置默认值。		if(defaultSelectedItem) {			listBox.clear();			this.onSelectItem(defaultSelectedItem);			}				// 设置点击下拉菜单时执行菜单显示。		this.menuButton.on('click', this.toggleMenu, this);				// 监听键盘事件。		this.on('keydown', this.onKeyDown);				// IE6 Hack: keydown 无法监听到回车。		if(navigator.isIE6) {			this.on('keypress', this.onKeyDown);			}	},		/**	 * 设置当前组合框是否允许用户输入自定义的值。	 */	setDropDownList: function (value) {		var textBox = this.find('.x-textbox');		if(textBox.node.readOnly = value !== false){			textBox.addClass('x-combobox-dropdownlist').on('click', this.toggleMenu, this);			} else {			textBox.removeClass('x-combobox-dropdownlist').un('click', this.toggleMenu, this);		}		return this;	},		/**	 * 获取当前组合框的值。	 */	getValue: function(){		return this.menu.getValue();	},		/**	 * 设置当前组合框的值。	 */	setValue: function(value){		var old = this.getValue();				this.menu.setValue(value);				if(this.formProxy) {			this.formProxy.value = value;		}				var t = this.menu.getSelectedItem();				// 如果选择的项，则表示 value 设置成功。		if(t) {			this.setText(t.getText());					// 否则， 找不到对应 value 的项。		} else if(old !== value){			this.onChange(old, value);		}		return this;	},		/**	 * 将当前文本的值同步到下拉菜单。	 */	updateMenu: function(){		return this.menu.setText(this.getText());	}}).addEvents('select');