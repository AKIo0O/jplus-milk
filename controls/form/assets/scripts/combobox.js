/** * @author xuld */using("Controls.Form.Picker");using("Controls.Form.ListBox");/** * 表示一个组合框。 * @class * @extends Picker * @example <pre> * var comboBox = new ComboBox(); * comboBox.menu.add("aaa"); * comboBox.menu.add("bbb"); * comboBox.menu.setSelectedIndex(0); * </pre>
 */var ComboBox = Picker.extend({		xtype: 'combobox',		/**	 * 处理键盘事件。
	 */	onKeyDown: function(e){		switch(e.keyCode) {						// 上下			case 40:			case 38:							// 阻止默认事件。			    e.preventDefault();			    				this._moveHover(e.keyCode === 40 ? 1 : -1);			    			    break;			    			// 回车			case 13:			case 10:				var currentItem = this._getHover();				if(currentItem != null) {					this.menu.setSelectedItem(currentItem);					e.preventDefault();				}		}	},		onSelect: function(item){		return this.trigger('select', item);	},		onSelectItem: function (item) {		if(this.onSelect(item)) {			this.hideMenu();			this.setSelectedItem(item);		}		return false;			},		/**	 * 移动当前选中项的位置。	 */	_moveHover: function(delta){				// 如果菜单未显示。	    if(this.menuHidden()){	    		    	// 显示菜单。	    	this.showMenu();	    } else {	    		    	if(!this._hoverItem){	    		this._hoverItem = this.selectedItem;	    	}	    		    }	},		_setHover: function(item){		var clazz = this.menu.xtype + '-hover';				if(this._hoverItem){			this._hoverItem.removeClass(clazz);		}				this._hoverItem = item.addClass(clazz);			},		onItemClick: function(item, e){				// 如果无法更改值，则直接忽略。		if(!this.getAttr('disabled') && !this.getAttr('readonly')) {						// 禁止事件。			e.stop();							// 设置当前的选中项。			this.setSelectedItem(item);					}			},		init: function (options) {				// 1. 处理 <select>				// 如果初始化的时候传入一个 <select> 则替换 <select>, 并拷贝相关数据。		if(this.node.tagName === 'SELECT') {			this.hiddenField = new Dom(this.node);						// 调用 create 重新生成 dom 。			this.node = Dom.parseNode(this.dropDownListTpl);						// 隐藏 <select> 为新的 dom。			this.hiddenField.hide();						// 让 listBox 拷贝 <select> 的成员。			this.copyItemsFromSelect(this.hiddenField);						this.dropDownList = this;					}				// 2. 初始化文本框				// 初始化文本框		this.base('init');				// 3. 初始化菜单				// 绑定下拉菜单的点击事件		this.menu.itemOn('click', this.onItemClick, this);				// 4. 绑定事件				// // 设置默认值。
		// if(defaultSelectedItem) {
			// listBox.clear();
			// this.onSelectItem(defaultSelectedItem);	
		// }				// 监听键盘事件。		this.on('keydown', this.onKeyDown);				// IE6 Hack: keydown 无法监听到回车。		if(navigator.isIE6) {			this.on('keypress', this.onKeyDown);			}	},		/**	 * 创建当前 Picker 的菜单。	 * @return {Control} 下拉菜单。	 */	createMenu: function(existDom){		return new ComboBox.DropDownMenu(existDom);	},		baseGetValue: function(item){			},		/**	 * 获取当前组合框的值。	 */	getValue: function(){		var item = this.getSelectedItem();		return item ? item.value : null;	},		/**	 * 设置当前组合框的值。	 */	setValue: function(value){		var old = this.getValue();				this.menu.setValue(value);				if(this.formProxy) {			this.formProxy.value = value;		}				var t = this.menu.getSelectedItem();				// 如果选择的项，则表示 value 设置成功。		if(t) {			this.setText(t.getText());					// 否则， 找不到对应 value 的项。		} else if(old !== value){			this.onChange(old, value);		}		return this;	},		/**	 * 将当前文本的值同步到下拉菜单。	 */	updateMenu: function(){		var item = this.getItemByText(this.getText());		if(item){			this._setHover(item);			}	},		updateText: function(item){				this.setText(item.getText());				// 如果是 dropDownList, 还需要更新 <select> 的值。		if(this.hiddenField){			this.inputField.setText(item.dataField().value || "");		}	},		getSelectedIndex: function(){		var item = this.getSelectedItem();		return item ? this.menu.indexOf(item) : -1;	},		setSelectedIndex: function(value){		return this.setSelectedItem(this.menu.item(value));	},		/**	 * 获取当前选中的项。如果不存在选中的项，则返回 null 。	 * @return {Control} 选中的项。	 */	getSelectedItem: function(){		return this.selectedItem;	},		/**	 * 设置当前选中的项。	 * @param {Control} item 选中的项。	 * @return this
	 */	setSelectedItem: function(item){		item = this.menu.itemOf(item);		if(this.onSelect(item)) {			this.selectedItem = item;			this.updateText(item);		}		return this;	}}).addEvents('select').defineMethods('menu', 'item indexOf each count add insertAt removeAt');ComboBox.DropDownMenu = ListControl.extend({		xtype: "x-listbox"});