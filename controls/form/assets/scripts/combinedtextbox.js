/** * @author xuld */imports("Controls.Button.Button");imports("Controls.Button.MenuButton");imports("Controls.Form.CombinedTextbox");using("Controls.Form.TextBox");var CombinedTextBox = TextBox.extend({		tpl: '<span class="x-combinedtextbox">\			<input type="text" class="x-textbox" type="text"/>\			<button class="x-button"><span class="x-button-menu"></span></button>\		</span>',		/**	 * @protected	 */	setMenuType: function(type){		this.menuButton.find('.x-button-menu').node.className = 'x-icon x-icon-' + type;		return this;	},		setText: function(value){		var old = this.getText();		Dom.prototype.setText.call(this.textBox, value);				if(old !== value)			this.onChange(old, value);	},		/**	 * @protected	 * @override	 */	init: function(){				if(this.node.tagName === 'INPUT'){			var t = this.node;			this.node = document.createElement('span');			if(t.parentNode)				t.parentNode.replaceChild(this.node, t);							this.node.className = 'x-combinedtextbox';			this.node.appendChild(t);			this.node.appendChild(Dom.parseNode('<button class="x-button"><span class="x-button-menu x-button-menu-down"></span></button>'));		}				this.addClass('x-combinedtextbox');		this.textBox = new TextBox(this.find('[type=text]'));		this.menuButton = this.find('.x-button');	},		setAttr: function (name, value) {		if(typeof value === 'boolean'){			return this.textBox.setAttr(name, value);		}		return this.base('setAttr');	},		setDisabled: function(value){		value = value !== false;		this.menuButton.setAttr('disabled', value ? 'disabled' : '').toggleClass('x-button-disabled', value);		return this.base('setDisabled');	}});Dom.define(CombinedTextBox, 'textBox', 'setReadOnly setName select', 'getDisabled getReadOnly getText getName getForm');