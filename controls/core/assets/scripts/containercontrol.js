/** * @author  xuld */imports("Controls.Core.ContainerControl");using("Controls.Core.ScrollableControl");var ContainerControl = ScrollableControl.extend({		/**	 * 获取当前容器控件的标题。	 * @getter {Control}
	 */	header: null,		/**	 * 获取当前容器控件的容器。	 * @getter {Control}	 */	content: null,	/**	 * 当被子类重写时，用于重写添加子控件的具体逻辑实现。	 * @param {Control} childControl 新添加的子控件。	 * @param {Control} refControl=null 用于表面添加的位置的子控件。指定控件会被插入到此控件之前。如果值为 null ，则添加到末尾。	 * @protected virtual	 */	onAdding: function(childControl, refControl) {		// 添加子节点到 content 容器。		childControl.attach(this.content.node, refControl ? refControl.node : null);	},	/** 	 * 当被子类重写时，用于重写删除子控件的具体逻辑实现。	 * @param {Control} childControl 要删除的子控件。	 * @protected virtual	 */	onRemoving: function(childControl) {		// 在 content 容器删除节点。		childControl.detach(this.content.node);	},		createHeader: function(){		var header = Dom.create('div', 'x-' + this.xtype + '-header');		new Dom(this.node).prepend(header);		header.setHtml('<h2></h2>');		return header;	},		init: function(){		var fix = '.x-' + this.xtype;		this.header = this.find(fix + '-header');		this.content = this.find(fix + '-body');	},		toggleHeader: function (value) {		if(this.header){			if(!value) {				this.header.remove();				this.header = null;			}		} else if(value){			this.header = this.createHeader();		}	},		getTitle: function(){		return (this.header.find('h2, h3, h4, h5') || this.header.find('a')).getHtml();	},		setTitle: function(value, valueAsText){		if(value != null){			this.toggleHeader(true);			(this.header.find('h2, h3, h4, h5') || this.header.find('a'))[valueAsText ? 'setText' : 'setHtml'](value);		} else {			this.toggleHeader(false);		}		return this;	},		setText: function(value){		this.empty().append(Dom.create('div', 'x-' + this.xtype + '-content')).setText(value);		return this;	},		getHtml: function(){		var first = this.content.first();		return (first.next() ? this.content : first).getHtml();	},		setHtml: function(value){		this.empty().append(Dom.create('div', 'x-' + this.xtype + '-content')).setHtml(value);		return this;	}}).defineMethods('content', 'getText first last children child empty');