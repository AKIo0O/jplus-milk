/** * @author  xuld */var TreeControl = ListControl.extend({		/**	 * 将已有的 DOM 节点转为 {@link TreeControl.Item} 对象。	 * @param {Dom} childControl 要转换的 DOM 对象。	 * @param {Dom} parent=null DOM 对象的父节点。	 */	createTreeItem: function(childControl, parent) {		return new TreeControl.Item(childControl);	},		initItemContainer: function(li){			// 获取第一个子节点。		var subTree = li.find('>.x-' + this.xtype),			item = (subTree ? (subTree.prev() || subTree.prev(true)) : (li.first() || li.first(true))) || Dom.parse('');				// 根据节点创建一个 MenuItem 对象。		item = this.createTreeItem(item, li);		// 如果存在子菜单，设置子菜单。		if (subTree) {			item.setSubControl(subTree);		}				// 保存 li -> childControl 的关联。		li.dataField().namedItem = item;	},	/**	 * 处理一个子控件，返回相应的 MenuItem 对象。	 */	initChild: function(childControl){				var item;				// 如果是添加 <li> 标签，则直接返回。		// .add('<li></li>')		if (childControl.node.tagName === 'LI') {						this.initItemContainer(childControl);			// .add(new MenuItem())		} else {						// 转为 MenuItem 对象。			// .add(文本或节点)			item = childControl instanceof TreeControl.Item ? childControl : this.createTreeItem(childControl);						// 创建一个新的容器节点。			childControl = Dom.create('LI', 'x-' + this.xtype + '-item');						// 复制节点。			childControl.append(item);							// 保存 li -> childControl 的关联。			childControl.dataField().namedItem = item;		}		return childControl;	},		initTreeItems: function(){		for(var c = this.first(); c; c = c.next()){			this.initItemContainer(c);			c.parentControl = this;		}	}});TreeControl.Item = ContentControl.extend({		tpl: '<a class="x-control"></a>',		/**	 * 当前项的子项。	 * @type {TreeControl}	 */	subControl: null,		createSubControl: function(){		return new TreeControl();	},		getSubControl: function(){		if(!this.subControl){			this.subControl(this.createSubControl());		}		return this.subControl;	},	setSubControl: function(control) {		if (control) {			if (!control.parent('body') && this.node.parentNode) {				this.after(control);			}			this.subMenu = control.hide();			menu.floating = false;			this.addClass('x-menuitem-submenu');			this.on('mouseup', this._cancelHideMenu);		} else {			menu.floating = true;			this.removeClass('x-menuitem-submenu');			this.un('mouseup', this._cancelHideMenu);		}		return this;	},});